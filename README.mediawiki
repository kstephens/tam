= TAM - Simple application event logging =

TAM uses a simple and extensible JSON schema to log, aggregate and normalize events from multiple applications into a central MongoDB store.

A simple Ruby library provides an API to log event records, where a ruby process will periodically collect log files and ship them to a MongoDB store.

= Data Schema =

JSON is a "schemaless" encoding.  However, TAM defines layered logical schemas to unify semantics.

== Base Schema ==

{|
!Name
!Type
!Format
!Required?
!Description
|-
|_id 
|String
|UUID (augmented)
|required
|Uniquely identifies event, generated by client.  Required by mongodb -- do not rely on mongo to generate this value.
|-
|kind 
|String
|Dotted hierarchy
|required
|Identifies the kind of event.  Events are talied by kind.
|-
|msg
|String
|Arbitrary string
|optional
|Humanly-readable message.  Should not encode data that could be stored in other attributes.
|-
|t
|Time
|ISODate("YYYY-mm-ddTHH:MM:SS.mmmZ") : ISO8601 in UTC
|required
|Time of event or metric.
|-
|nt
|DBRef
|{ $id: ..., $ref: ... }
|
|DBRef to a normalized time (db.nt) object.  See lib/js/normalized_time.js.
|-
|dt
|Number
|elapsed seconds.
|
|Duration of event, if known.  Example: see kind: 'process.end' records.
|-
|parents
|Array of _ids
|
|
|A list of events that directly preceded (spawned) this event.
Used to relate cause-and-effect.
|-
|completes
|_ids
|
|
|The event that this event completes/finishes, implies dt.  Example: see kind: 'process.end' records.
|}

== Process Schema ==

Additions to Base Schema

{|
!Name
!Type
!Format
!Required?
!Description
|-
|progname
|String
|argv[0]
|required
|Name of program.
|-
|app
|String
|
|
|A string to identify the application, may not be same as progname.
|-
|host
|String
|$(hostname -f)
|required
|FQDN of host that generated this event.
|-
|pid
|Integer
|
|required
|The process ID of the process that generated this event (if known).
|-
|puuid
|UUID
|
|required, primary
|The universally unique process ID generated this event (if known).
|-
|uid
|String
|getuid()
|required
|UNIX User id running program.
|-
|gid
|String
|getgid()
|required
|UNIX group id running program.
|-
|cwd
|String
|getcwd()
|
|Current working directory of program.
|-
|exitcode
|Integer
|
|
|The exit code for this process.
|}

== Error/Exception Schema ==

Additions to Base Schema

{|
!Name
!Type
!Format
!Required?
!Description
|-
|e_class
|String
|exc.class.name
|
|Name of exception class.
|-
|msg
|String
|exc.message
|
|Exception message.
|-
|e_bt
|Array of Strings
|exc.backtrace
|
|Exception backtrace.
|}

== Kind Taxonomy ==

* process - process level monitoring 
** process.start - A process started (or was forked)
** process.end   - A process ended (or died or was killed)
* error

= Usage =

== Process ==

Example:

<pre>
# Process Start 
db.tam.save({"progname":"myscript.rb",
             "t":ISODate("2011-06-17T22:43:07.279Z"),
             "kind":"process.start",
             "host":"kurt-4.mydomain.com",
             "puuid":"7709f945-3365-4ef5-8cc8-b11f3d39d00b",
             "_id":"7709f945-3365-4ef5-8cc8-b11f3d39d00b-1",
             "pid":5143
});
# Error
db.tam.save({
             "_id":"7709f945-3365-4ef5-8cc8-b11f3d39d00b-2",
             "t":ISODate("2011-06-17T22:43:08.276Z"),
             "kind":"error",
             "e_class":"TypeError"
             "e_msg":"I WANT A COOKIE!",
             "e_by":["myscript.rb:137"],

             "puuid":"7709f945-3365-4ef5-8cc8-b11f3d39d00b",
});
# Process Stop
db.tam.save({
           "_id":"7709f945-3365-4ef5-8cc8-b11f3d39d00b-3"
           "t":ISODate("2011-06-17T22:43:08.277Z"),
           "kind":"process.end",
           "completes":"7709f945-3365-4ef5-8cc8-b11f3d39d00b-1",
           "dt":0.997587,
           "puuid":"7709f945-3365-4ef5-8cc8-b11f3d39d00b"
});
</pre>

= Ruby Examples =

= Tools =

bin/tam provides a basic command line interface to TAM.

== bin/tam run importer ==

Starts a TAM::Log::Importer

== bin/tam run process_watcher ==

Starts a TAM::ProcessWatcher


